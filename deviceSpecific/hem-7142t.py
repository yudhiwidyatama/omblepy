import sys
import datetime
import logging
logger = logging.getLogger("omblepy")

sys.path.append('..')
from sharedDriver import sharedDeviceDriverCode

class deviceSpecificDriver(sharedDeviceDriverCode):
    deviceEndianess                 = "little"
    deviceCheckParentUUID           = False
    deviceUseLockUnlock             = False
    userStartAdressesList           = [0x02e8]
    perUserRecordsCountList         = [60]
    recordByteSize                  = 0x0e
    transmissionBlockSize           = 0x08
    
    settingsReadAddress             = 0x0010
    settingsWriteAddress            = 0x0054

    settingsUnreadRecordsBytes      = [0x00, 0x10]
    settingsTimeSyncBytes           = [0x2C, 0x3C]
    
    def deviceSpecific_ParseRecordFormat(self, singleRecordAsByteArray):
        recordDict             = dict()
        minute                 = self._bytearrayBitsToInt(singleRecordAsByteArray, 68-16, 73-16)
        second                 = self._bytearrayBitsToInt(singleRecordAsByteArray, 74-16, 79-16)
        second                 = min([second, 59]) #for some reason the second value can range up to 63
        recordDict["mov"]      = self._bytearrayBitsToInt(singleRecordAsByteArray, 80-16, 80-16)
        recordDict["ihb"]      = self._bytearrayBitsToInt(singleRecordAsByteArray, 81-16, 81-16)
        month                  = self._bytearrayBitsToInt(singleRecordAsByteArray, 82-16, 85-16)
        day                    = self._bytearrayBitsToInt(singleRecordAsByteArray, 86-16, 90-16)
        hour                   = self._bytearrayBitsToInt(singleRecordAsByteArray, 91-16, 95-16)
        year                   = self._bytearrayBitsToInt(singleRecordAsByteArray, 98-16, 103-16) + 2000
        recordDict["bpm"]      = self._bytearrayBitsToInt(singleRecordAsByteArray, 104-16, 111-16)
        recordDict["dia"]      = self._bytearrayBitsToInt(singleRecordAsByteArray, 112-16, 119-16)
        recordDict["sys"]      = self._bytearrayBitsToInt(singleRecordAsByteArray, 120-16,  127-16) + 25
        recordDict["datetime"] = datetime.datetime(year, month, day, hour, minute, second)
        return recordDict
        
    def deviceSpecific_syncWithSystemTime(self):
        timeSyncSettingsCopy = self.cachedSettingsBytes[slice(*self.settingsTimeSyncBytes)]
        #read current time from cached settings bytes
        year, month, day, hour, minute, second = [int(byte) for byte in timeSyncSettingsCopy[8:14]]
        try:
            logger.info(f"device is set to date: {datetime.datetime(year + 2000, month, day, hour, minute, second).strftime('%Y-%m-%d %H:%M:%S')}")
        except:
            logger.warning(f"device is set to an invalid date")

        #write the current time into the cached settings which will be written later
        currentTime = datetime.datetime.now()
        setNewTimeDataBytes = timeSyncSettingsCopy[0:8]      #Take the first eight bytes from eeprom without modification
        setNewTimeDataBytes += bytes([currentTime.year - 2000, currentTime.month, currentTime.day, currentTime.hour, currentTime.minute, currentTime.second])
        setNewTimeDataBytes += bytes([sum(setNewTimeDataBytes) & 0xff, 0x00])           #first byte does not seem to matter, second byte is crc generated by sum over data and only using lower 8 bits
        self.cachedSettingsBytes[slice(*self.settingsTimeSyncBytes)] = setNewTimeDataBytes
        
        logger.info(f"settings updated to new date {currentTime.strftime('%Y-%m-%d %H:%M:%S')}")
        return